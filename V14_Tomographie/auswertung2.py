import matplotlib.pyplot as plt
import numpy as np
from uncertainties import ufloat
import uncertainties.unumpy as unp
from numpy.linalg import inv
import pandas as pd
import pint
import rich
from rich.console import Console
import generate_table
import tools
ureg = pint.UnitRegistry()
console = Console()

d_EinzelwÃ¼rfel = ureg('1 cm')

Î¼_LIT = {
    # TODO: kopiert aus calc_mu.py
    'Al': ureg('0.2007 / cm'),
    'Pb': ureg('1.1737 / cm'),
    'Fe': ureg('0.5704 / cm'),
    'Messing': ureg('0.6088 / cm'),
    'Delrin': ureg('0.1176 / cm'),
    'Holz': ureg('0.0612 / cm'),
}


def A_row_from_indices(indices):
    """
    Gibt eine Zeile der Matrix A zurÃ¼ck.
    Die EintrÃ¤ge stehen dabei fÃ¼r die je ElementarwÃ¼rfel (Âµ_i) passierte Wegstrecke.

    Beispiel:
    '2/4' â†’ [0, âˆš2Â·d, 0, âˆš2Â·d, 0, 0, â€¦]
    """
    d_EinzelwÃ¼rfel = 1  # NOTE: Einheiten + Matrizen = ðŸ—²
    indices = indices.strip()  # TODO ZwischenlÃ¶sung
    row = np.zeros(9)  # 9 = Anz. WÃ¼rfel
    if '/' in indices:
        assert '|' not in indices
        # â†’ diagonal
        for i in map(int, indices.split('/')):
            row[i-1] = np.sqrt(2) * d_EinzelwÃ¼rfel
    elif '|' in indices:
        assert '/' not in indices
        # â†’ parallel
        for i in map(int, indices.split('|')):
            row[i-1] = d_EinzelwÃ¼rfel
    return row


def d_row_from_indices(indices):
    # NOTE: `row` steht hier fÃ¼r ein einzelnes Elementâ€¦
    """
    Gibt die gesamte Wegstrecke im WÃ¼rfel zurÃ¼ck.
    """
    return A_row_from_indices(indices).sum() * ureg.cm  # TODO: Einheiten hÃ¼bscherâ€¦


def A_from_indices(all_indices):
    return np.row_stack(list(map(A_row_from_indices, all_indices)))


def d_from_indices(all_indices):
    return tools.pintify(list(map(d_row_from_indices, all_indices)))


def I_0_from_indices(all_indices):
    return tools.pintify(list(map(I_0_row_from_indices, all_indices)))


def I_0_row_from_indices(indices):
    """
    Gibt die zu den Indizes gehÃ¶rige Nullmessung zurÃ¼ck.

    Beispiele:
    â€¢ '4|5|6' â†’ I_0_Parallel
    â€¢ '2/4' â†’ I_0_Nebendiagonale
    """
    if '/' in indices:
        if len(indices.split('/')) == 3:
            return I_0_hauptdiag
        else:
            assert len(indices.split('/')) == 2
            return I_0_nebendiag
    else:
        assert '|' in indices
        return I_0_parallel


@ureg.wraps(ureg.s**(-1), [ureg.dimensionless, ureg.s])
def calc_I(N, T):
    """
    ZÃ¤hlrate aus Anzahl N und Zeit T.
    """
    I = unp.uarray(N / T, np.sqrt(N)/T) / ureg.s
    return I


def analyze_homogen(dat, I_0_getter):
    I_0 = I_0_getter(dat['indices'])
    d = d_from_indices(dat['indices'])
    Î¼_vec = (
        unp.log((I_0 / dat['I']).to('dimensionless').m) /
        d
    )

    return Âµ_vec


def analyze_inhomogen(dat, I_0_getter):
    """
    Berechne die Âµ-Werte eines inhomogenen WÃ¼rfels mittels der Methode der gewichteten kleinsten Quadrate.

    Mehr Infos zum Verfahren: https://en.wikipedia.org/wiki/Weighted_least_squares
    """
    A = A_from_indices(dat['indices'])
    # print(A.round(1))

    I_0 = I_0_getter(dat['indices'])

    # alt â†“
    # y = unp.log((I_0 / dat['I']).to('dimensionless').m)
    # Î¼_vec = (np.linalg.inv(A.T @ A) @ A.T @ y)

    # neu â†“
    y = unp.log((I_0 / dat['I']).to('dimensionless').m)
    y_var = unp.std_devs(y)**2
    W = np.diag(1 / y_var)
    Î¼_vec = (np.linalg.inv(A.T @ W @ A) @ A.T @ W @ y)
    Âµ_vec /= ureg.cm

    # â†“ Das ist erstmal noch kein Vektor, sondern eine Kovarianzmatrix! Wir betrachten die Diagonale.
    Âµ_vec_var = np.diag(np.linalg.inv(A.T @ W @ A))
    Âµ_vec_std = np.sqrt(Âµ_vec_var)

    # â†“ smoke test
    assert np.isclose(unp.std_devs(Âµ_vec), Âµ_vec_std, rtol=0.2).all()

    # NOTE: FÃ¼r den Augenblick sollen die Unsicherheiten, die UNumPy mitgeschleppt hat, genÃ¼gen.

    return Âµ_vec


def get_data(filename):
    dat = pd.read_csv(filename, comment='#')

    N = dat['N'].to_numpy() * ureg.dimensionless
    T = dat['T'].to_numpy() * ureg.s

    I = calc_I(N, T)

    # NOTE: Ohne pint-pandas wird implizit zu einheitenlosen Arrays konvertiert,
    # daher verwenden wir hier ein normales dict.
    return {
        'N': N * ureg.dimensionless,
        'T': T * ureg.s,
        'I': I,
        'indices': dat['indices'],
    }


def get_closest_material(Âµ, Âµ_map):
    """
    Âµ sind die Messwerte, denen die Materialien zugeordnet werden sollen.
    Âµ_map ist ein dict mit Materialnamen als Keys und Âµ-Werten als Values.
    """
    diff_tuples = [(abs(Âµ - Âµ_map_single), name) for name, Âµ_map_single in Âµ_map.items()]
    diff_tuples.sort()
    return diff_tuples[0][1]


def indices_string_to_list(indices_string):
    """
    Beispiel: '4|5|6' â†’ [4, 5, 6]
    """
    str_list = indices_string.split('/') if '/' in indices_string else indices_string.split('|')
    int_list = [int(s) for s in str_list]
    return int_list


def visualize_indices(indices_list):
    NUMCELLS = 3

    def i_to_coords(i):
        """Inputs and outputs 0-indexed values."""
        return (i % NUMCELLS, i // NUMCELLS)

    assert i_to_coords(1-1) == (0, 0)
    assert i_to_coords(9-1) == (2, 2)

    TEMPLATE_OUTER = r'''
    \begin{tikzpicture}
    [
        box/.style={rectangle, draw=gray!40, inner sep=0pt },
    ]
    \newcommand*{\numcells}{3}%
    \newcommand*{\cellsize}{(2ex/\numcells)}%

\foreach \x in {1,...,\numcells}{
    \foreach \y in {1,...,\numcells}
        \node[box, minimum size=\cellsize] at ({\x*\cellsize},{-\y*\cellsize}){};
}

{FILL}

\end{tikzpicture}'''

    TEMPLATE_FILL = r'\node[box,minimum size=\cellsize,fill=red] at ({#1*\cellsize},{-#2*\cellsize}){};'

    fill_positions = [i_to_coords(int(i)-1) for i in indices_list]

    fill = '\n'.join(TEMPLATE_FILL.replace('#1', str(x+1)).replace('#2', str(y+1)) for x, y in fill_positions)

    return TEMPLATE_OUTER.replace('{FILL}', fill)


console.rule("Nullmessung")
dat_Nullmessung = get_data('dat/WÃ¼rfel1.csv')
assert dat_Nullmessung['I'].check('1/[time]')
I_0_parallel, I_0_hauptdiag, I_0_nebendiag = dat_Nullmessung['I']
print(f"I_0 = {tools.nominal_values(dat_Nullmessung['I']):.2f}")

generate_table.generate_table_pint(
    f'build/tab/wuerfel1.tex',
    ('Projektion', None, dat_Nullmessung['indices']),
    ('', None, [visualize_indices(indices_string_to_list(i)) for i in dat_Nullmessung['indices']]),
    ('I_0', ureg.second**(-1), dat_Nullmessung['I']),
    # kein Âµ hier; dafÃ¼r brauchen wir ja gerade die Nullmessung
)


WÃœRFEL = [
    {
        'num': 2,
        'material': 'Fe',  # Mampfzwerg, SanjoR
    },
    {
        'num': 3,
        # 'material': 'Delrin',  # Insider-Tipp: eigentlich Holz
        'material': 'Holz',
    },
]

Âµ_mess_dict = {}

for wÃ¼rfel in WÃœRFEL:
    console.rule(f"WÃ¼rfel {wÃ¼rfel['num']}")
    dat = get_data(f'dat/WÃ¼rfel{wÃ¼rfel["num"]}.csv')
    Âµ_vec = analyze_homogen(dat, I_0_from_indices)
    Âµ = Âµ_vec.mean()  # TODO: SEM
    print(f"Î¼ = {Î¼:.3f}")
    print(f"rel. Unsicherheit: {Âµ.s/Âµ.n:.1%}")

    Âµ_mess_dict[f"WÃ¼rfel {wÃ¼rfel['num']}"] = Âµ

    mat = get_closest_material(Âµ, Âµ_LIT)
    print(f"Best fit: {mat}")
    if mat == wÃ¼rfel['material']:
        print("â†’ wie erwartet :)")
    else:
        print(f"â†’ sollte {wÃ¼rfel['material']} sein :(")
    print(
        "Abweichung Âµ vs. Âµ_lit (best fit):\n" +
        tools.fmt_compare_to_ref(Âµ, Âµ_LIT[mat])
    )
    # print(
    #     f"Abweichung best-fit vs. Âµ_lit des tatsÃ¤chlichen Materials ({wÃ¼rfel['material']}):\n" +
    #     tools.fmt_compare_to_ref(Âµ, Âµ_LIT[wÃ¼rfel['material']])
    # )

    generate_table.generate_table_pint(
        f'build/tab/wuerfel{wÃ¼rfel["num"]}.tex',
        ('Projektion', None, dat['indices']),
        ('', None, [visualize_indices(indices_string_to_list(i)) for i in dat['indices']]),
        ('I', ureg.second**(-1), dat['I']),
        (r'\mu', ureg.centimeter**(-1), Âµ_vec, 3),
    )


console.rule("WÃ¼rfel 4")
dat = get_data(f'dat/WÃ¼rfel4.csv')
Âµ_vec = analyze_inhomogen(dat, I_0_from_indices)
for y in range(3):
    print('\t'.join([f"{x.n:.2f}" for x in Âµ_vec[3*y:3*y+3]]))

mat_closest_lit_vec = [get_closest_material(Âµ, Âµ_LIT) for Âµ in Âµ_vec]
Âµ_closest_lit_vec = tools.pintify([Âµ_LIT[mat] for mat in mat_closest_lit_vec])

mat_closest_mess_vec = [get_closest_material(Âµ, Âµ_mess_dict) for Âµ in Âµ_vec]
Âµ_closest_mess_vec = tools.pintify([Âµ_mess_dict[mat] for mat in mat_closest_mess_vec])

generate_table.generate_table_pint(
    f'build/tab/wuerfel4.tex',
    ('Projektion', None, dat['indices']),
    ('', None, [visualize_indices(indices_string_to_list(i)) for i in dat['indices']]),
    ('I', ureg.second**(-1), dat['I']),
    # kein Âµ hier; fÃ¼r einzelne Projektionen ist Âµ_vec unterbestimmt
)

ureg.define('percent = 1 / 100')

generate_table.generate_table_pint(
    f'build/tab/wuerfel4_mu.tex',
    ('Index $i$', None, np.arange(len(Âµ_vec))+1),
    ('', None, [visualize_indices([i]) for i in np.arange(len(Âµ_vec))+1]),
    (r'\mu', ureg.centimeter**(-1), Âµ_vec, 3),
    (r'\text{Material}', None, mat_closest_lit_vec),
    (r'\text{Abweichung}', ureg.percent, tools.nominal_values(abs((Âµ_vec-Âµ_closest_lit_vec)/Âµ_closest_lit_vec))),
    (r'\text{Material}', None, mat_closest_mess_vec),
    (r'\text{Abweichung}', ureg.percent, tools.nominal_values(abs((Âµ_vec-Âµ_closest_mess_vec)/Âµ_closest_mess_vec))),
)

# FIXME: WÃ¤hrend generate_table keine multicolumns unterstÃ¼tzt, mogeln wir das mal reinâ€¦
MULTICOLUMN = r'''
&&& \multicolumn{2}{c}{nÃ¤chster Literaturwert} & \multicolumn{2}{c}{nÃ¤chster Messwert} \\
\cmidrule(lr){4-5} \cmidrule(lr){6-7}
'''.strip()
with open(f'build/tab/wuerfel4_mu.tex', 'r') as f:
    lines = f.readlines()
lines = lines[:2] + [MULTICOLUMN] + lines[2:]
with open(f'build/tab/wuerfel4_mu.tex', 'w') as f:
    f.writelines(lines)


# Annahme: Der WÃ¼rfel besteht aus nur zwei Materialien
# â†’ Bestimmte den jeweiligen durchschnittlichen Absorptionskoefizienten
# TODO: negative Âµ ignorieren
# material_mask = Âµ_vec < np.median(Âµ_vec)
# Âµ_vec_material_1 = Âµ_vec[material_mask].mean()
# Âµ_vec_material_2 = Âµ_vec[~material_mask].mean()
# print(f"Âµ_1 = {Âµ_vec_material_1:.3f}")
# print(f"Âµ_2 = {Âµ_vec_material_2:.3f}")


# â–ˆ Visualisierung der Âµ in WÃ¼rfel 4
x, y = np.arange(3), np.arange(3)
Âµ_plt = unp.nominal_values(Âµ_vec).reshape(3, 3)
plt.pcolormesh(x, y, Âµ_plt)
plt.gca().invert_yaxis()
plt.gca().set_aspect('equal')
plt.xticks([])
plt.yticks([])
plt.colorbar()
for i, (y, x) in enumerate(np.ndindex(3, 3), 1):
    plt.text(x, y, r'$\mu_' f'{i}$', ha='center', va='center')
plt.savefig('build/plt/wuerfel4.pdf')
# plt.show()
