import matplotlib.pyplot as plt
import numpy as np
from uncertainties import ufloat
import uncertainties.unumpy as unp
from numpy.linalg import inv
import pandas as pd
import pint
import rich
from rich.console import Console
import generate_table
import tools
ureg = pint.UnitRegistry()
console = Console()

d_EinzelwÃ¼rfel = ureg('1 cm')

Î¼_LIT = {
    # TODO: kopiert aus calc_mu.py
    'Al': ureg('0.2007 / cm'),
    'Pb': ureg('1.1737 / cm'),
    'Fe': ureg('0.5704 / cm'),
    'Messing': ureg('0.6088 / cm'),
    'Delrin': ureg('0.1176 / cm'),
}


def A_row_from_indices(indices):
    """
    Gibt eine Zeile der Matrix A zurÃ¼ck.
    Die EintrÃ¤ge stehen dabei fÃ¼r die je ElementarwÃ¼rfel (Âµ_i) passierte Wegstrecke.

    Beispiel:
    '2/4' â†’ [0, âˆš2Â·d, 0, âˆš2Â·d, 0, 0, â€¦]
    """
    d_EinzelwÃ¼rfel = 1  # NOTE: Einheiten + Matrizen = ðŸ—²
    indices = indices.strip()  # TODO ZwischenlÃ¶sung
    row = np.zeros(9)  # 9 = Anz. WÃ¼rfel
    if '/' in indices:
        assert '|' not in indices
        # â†’ diagonal
        for i in map(int, indices.split('/')):
            row[i-1] = np.sqrt(2) * d_EinzelwÃ¼rfel
    elif '|' in indices:
        assert '/' not in indices
        # â†’ parallel
        for i in map(int, indices.split('|')):
            row[i-1] = d_EinzelwÃ¼rfel
    return row


def d_row_from_indices(indices):
    # NOTE: `row` steht hier fÃ¼r ein einzelnes Elementâ€¦
    """
    Gibt die gesamte Wegstrecke im WÃ¼rfel zurÃ¼ck.
    """
    return A_row_from_indices(indices).sum() * ureg.cm  # TODO: Einheiten hÃ¼bscherâ€¦


def A_from_indices(all_indices):
    return np.row_stack(list(map(A_row_from_indices, all_indices)))


def d_from_indices(all_indices):
    return tools.pintify(list(map(d_row_from_indices, all_indices)))


def I_0_from_indices(all_indices):
    return tools.pintify(list(map(I_0_row_from_indices, all_indices)))


def I_0_row_from_indices(indices):
    """
    Gibt die zu den Indizes gehÃ¶rige Nullmessung zurÃ¼ck.

    Beispiele:
    â€¢ '4|5|6' â†’ I_0_Parallel
    â€¢ '2/4' â†’ I_0_Nebendiagonale
    """
    if '/' in indices:
        if len(indices.split('/')) == 3:
            return I_0_hauptdiag
        else:
            assert len(indices.split('/')) == 2
            return I_0_nebendiag
    else:
        assert '|' in indices
        return I_0_parallel


@ureg.wraps(ureg.s**(-1), [ureg.dimensionless, ureg.s])
def calc_I(N, T):
    """
    ZÃ¤hlrate aus Anzahl N und Zeit T.
    """
    I = unp.uarray(N / T, np.sqrt(N)/T) / ureg.s
    return I


def analyze_homogen(dat, I_0_getter):
    I_0 = I_0_getter(dat['indices'])
    d = d_from_indices(dat['indices'])
    Î¼_vec = (
        unp.log((I_0 / dat['I']).to('dimensionless').m) /
        d
    )

    # print(f'{Î¼_vec=}')
    Âµ = Âµ_vec.mean()  # TODO: SEM
    # print(f'{Î¼=}')
    return Âµ


def analyze_inhomogen(dat, I_0_getter):
    A = A_from_indices(dat['indices'])
    # print(A.round(1))

    I_0 = I_0_getter(dat['indices'])
    y = unp.log((I_0 / dat['I']).to('dimensionless').m)
    Î¼_vec = (np.linalg.inv(A.T @ A) @ A.T @ y)
    Î¼_vec /= ureg.cm  # TODO: hÃ¼bscher
    return Âµ_vec


def get_data(filename):
    dat = pd.read_csv(filename, comment='#')

    N = dat['N'].to_numpy() * ureg.dimensionless
    T = dat['T'].to_numpy() * ureg.s

    I = calc_I(N, T)

    # NOTE: Ohne pint-pandas wird implizit zu einheitenlosen Arrays konvertiert,
    # daher verwenden wir hier ein normales dict.
    return {
        'N': N * ureg.dimensionless,
        'T': T * ureg.s,
        'I': I,
        'indices': dat['indices'],
    }


def get_closest_material(Âµ):
    diff_tuples = [(abs(Âµ - Âµ_lit_single), name) for name, Âµ_lit_single in Âµ_LIT.items()]
    diff_tuples.sort()
    return diff_tuples[0][1]


console.rule("Nullmessung")
dat_Nullmessung = get_data('dat/Nullmessung.csv')
assert dat_Nullmessung['I'].check('1/[time]')
I_0_parallel, I_0_hauptdiag, I_0_nebendiag = dat_Nullmessung['I']
print(f"I_0 = {tools.nominal_values(dat_Nullmessung['I']):.2f}")

WÃœRFEL = [
    {
        'num': 2,
        'material': 'Fe',  # Mampfzwerg, SanjoR
        'homogen': True,
    },
    {
        'num': 3,
        'material': 'Delrin',  # Insider-Tipp: eigentlich Holz
        'homogen': True,
    },
    # {
    #     'num': 4,
    #     # 'material': [1, 2, 3, 4, 5, 6, 7, 8, 9],  # TODO
    #     'homogen': False,
    # },
]

for wÃ¼rfel in WÃœRFEL:
    console.rule(f"WÃ¼rfel {wÃ¼rfel['num']}")
    dat = get_data(f'dat/WÃ¼rfel{wÃ¼rfel["num"]}.csv')
    if wÃ¼rfel['homogen']:
        Âµ = analyze_homogen(dat, I_0_from_indices)
    else:
        Âµ = analyze_inhomogen(dat, I_0_from_indices)
    print(f"Î¼ = {Î¼:.3f}")
    print(f"rel. Unsicherheit: {Âµ.s/Âµ.n:.1%}")

    mat = get_closest_material(Âµ)
    print(f"Best fit: {mat}")
    if mat == wÃ¼rfel['material']:
        print("â†’ wie erwartet :)")
    else:
        print(f"â†’ sollte {wÃ¼rfel['material']} sein :(")
    print(
        "Abweichung Âµ vs. Âµ_lit (best fit):\n" +
        tools.fmt_compare_to_ref(Âµ, Âµ_LIT[mat])
    )
    print(
        f"Abweichung best-fit vs. Âµ_lit des tatsÃ¤chlichen Materials ({wÃ¼rfel['material']}):\n" +
        tools.fmt_compare_to_ref(Âµ, Âµ_LIT[wÃ¼rfel['material']])
    )

    generate_table.generate_table_pint(
        f'build/tab/wuerfel{wÃ¼rfel["num"]}.tex',
        ('Projektion', None, dat['indices']),
        ('I', ureg.second**(-1), dat['I']),
        # ('Âµ', ureg.centimeter**(-1), Âµ_vec), # TODO
    )


console.rule("WÃ¼rfel 4")
dat = get_data(f'dat/WÃ¼rfel4.csv')
Âµ = analyze_inhomogen(dat, I_0_from_indices)
for y in range(3):
    print('\t'.join([f"{x.n:.2f}" for x in Âµ[3*y:3*y+3]]))


x, y = np.arange(3), np.arange(3)
Âµ_plt = unp.nominal_values(Âµ).reshape(3, 3)
plt.pcolormesh(x, y, Âµ_plt)
plt.gca().invert_yaxis()
plt.gca().set_aspect('equal')
plt.xticks([])
plt.yticks([])
plt.colorbar()
for i, (y, x) in enumerate(np.ndindex(3, 3), 1):
    plt.text(x, y, r'$\mu_' f'{i}$', ha='center', va='center')
plt.savefig('build/plt/wuerfel4.pdf')
# plt.show()
