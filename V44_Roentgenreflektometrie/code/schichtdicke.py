# import generate_table
import matplotlib.pyplot as plt
import numpy as np
import scipy as sp

# import generate_table
import tools


def Œ±_to_q(Œ±, Œª):
    """
    q ist der Wellenvektor√ºbertrag.
    """
    # TODO: Blind √ºbernommen aus @Mampfzwerg
    # Die Faktoren sehen so aus, als w√§ren sie nur f√ºr deg‚Üírad ü§î
    q = 4 * np.pi / Œª * np.sin(np.pi / 180 * Œ±)
    return q


def calc_G(Œ±, D, d_Strahl, Œ±_g):
    """
    Berechnet den Geometriefaktor G.
    Dieser wird relevant, wenn die Probe nicht die gesamte Strahlbreite ausf√ºllt (f√ºr Œ± < Œ±_g).

    d_Strahl: Strahlbreite
    Œ±_g: Geometriewinkel
    """
    # Œ±_g = ureg('0.28 mm')
    Œ±_g_alt = np.arcsin(d_Strahl / D)
    G = D * np.sin(Œ±) / d_Strahl
    G[Œ± > Œ±_g] = 1
    return G


def calc_parratt(
    Œ±,
    z,
    k, Œ±_c_Si,
    Œ¥1, Œ¥2,
    œÉ1, œÉ2,
    ureg,
    rauigkeit=False,
):
    """
    Œ¥_i: Brechungsindex-Korrektur (n = 1 - Œ¥_i)
    œÉ_i: Rauigkeit der Grenzfl√§che
    """

    n1 = 1  # Luft
    n2 = 1 - Œ¥1  # Polysterol
    n3 = 1 - Œ¥2  # Silizium

    # ----------------------------

    kz1 = k * np.sqrt(np.abs(n1**2 - np.cos(Œ±)**2))
    kz2 = k * np.sqrt(np.abs(n2**2 - np.cos(Œ±)**2))
    kz3 = k * np.sqrt(np.abs(n3**2 - np.cos(Œ±)**2))
    #
    r12 = (kz1 - kz2) / (kz1 + kz2)
    r23 = (kz2 - kz3) / (kz2 + kz3)
    r13 = ((kz1 - kz3) / (kz1 + kz3))**2

    if rauigkeit:
        r12 *= np.exp(-2 * kz1 * kz2 * œÉ1**2)
        r23 *= np.exp(-2 * kz2 * kz3 * œÉ2**2)
        r13 *= 0  # NOTE: Hierzu hat @Mampfzwerg keine Formel
    #
    x2 = np.exp(0 - (kz2 * z) * 2j) * r23
    x1 = (r12 + x2) / (1 + r12 * x2)
    par = np.abs(x1)**2

    # Strecke vor Beginn der Oszillationen auf 1 setzen
    par[Œ± < Œ±_c_Si] = 1
    r13[Œ± < Œ±_c_Si] = 1
    return par, r13


def main(name, mess_refl, mess_diff, ureg, d_Strahl, Œ±_g, litdata):
    """
    d_Strahl: Strahlbreite (siehe Z-Scan)
    Œ±_g: Geometriewinkel (siehe Rockingscan)
    """
    assert np.all(mess_refl[0] == mess_diff[0]), "x-Werte stimmen nicht √ºberein"
    Œ±, I_refl = mess_refl
    Œ±, I_diff = mess_diff

    # Ausgangswerte
    I = I_refl.copy()
    # Korrektur um diffusen Anteil
    I -= I_diff
    I_corr_diff = I.copy()
    # Korrektur um Geometriefaktor
    G = calc_G(Œ±, D=ureg('20 mm'), d_Strahl=d_Strahl, Œ±_g=Œ±_g)  # TODO: /= oder *=?
    G[0] = G[1]  # TODO: Workaround for division by zero
    # print(f"G = {G}")
    # I /= G # TODO
    I_corr_G = I_refl / G

    Œª = ureg('1.54 √Ö')  # ? (@Mampfzwerg)
    k = 2*np.pi / Œª  # Wellenvektor
    q = Œ±_to_q(Œ±, Œª=Œª)

    # ‚ñà Schichtdicke bestimmen (Peaks finden)
    # peaks, peak_props = sp.signal.find_peaks(tools.nominal_values(I).to('1/s').m, height=(1E2, 1E4), prominence=5, distance=8)
    # TODO: Fast funktioniert es automatisch. Fast‚Ä¶
    peaks = [70, 81, 91, 100, 111, 119, (131), 144, 155]
    assert len(peaks) > 0, "Keine Peaks gefunden"
    print(f"Peak-Indizes: {peaks}")
    # TODO: add sem/ufloat
    ŒîŒ±_mean = np.mean(np.diff(Œ±[peaks].to('rad').m)) * ureg.rad
    Œîq_mean = np.mean(np.diff(q[peaks].to('1/m').m)) * ureg['1/m']
    # d_estim_a = 2*np.pi / Œîq_mean # anderes Resultat als bei @Mampfzwerg
    d_estim_b = Œª / (2 * ŒîŒ±_mean)  # korrekte Daten bei @Mampfzwerg
    print(f"ŒîŒ±_mean = {ŒîŒ±_mean}")
    print(f"Œîq_mean = {Œîq_mean}")
    # print(f"d_estim_a = {d_estim_a.to('m')}")
    print(f"d_estim_b = {d_estim_b.to('nm')}")

    # berechenbar aus Œ¥ !? (@Mampfzwerg)
    # Œ±_c_PS = ureg('0.068 ¬∞')
    # Œ±_c_Si = ureg('0.210 ¬∞')

    plt.figure()

    # z = d_estim_b

    # Œ±_c_Si = np.sqrt(2 * Œ¥)
    Œ±_c_PS = Œª * np.sqrt(litdata['PS']['r_e¬∑œÅ'] / 2)
    Œ±_c_Si = Œª * np.sqrt(litdata['Si']['r_e¬∑œÅ'] / 2)
    # print(f"Œ±_c_PS = {Œ±_c_PS.to('¬∞'):.2f}")
    # print(f"Œ±_c_Si = {Œ±_c_Si.to('¬∞'):.2f}")
    print(tools.fmt_compare_to_ref(Œ±_c_PS, litdata['PS']['Œ±_c'], 'Œ±_c_PS'))
    print(tools.fmt_compare_to_ref(Œ±_c_Si, litdata['Si']['Œ±_c'], 'Œ±_c_Si'))

    # ‚ñà Parameter
    parrat_params = {
        'Œ±_c_Si': Œ±_c_Si,
        # Brechungsindizes
        # Œ¥1 = litdata['PS']['Œ¥']  # Polysterol ‚Üí Amplitude vergr√∂√üert + negativer Offset
        # Œ¥2 = litdata['Si']['Œ¥']  # Silizium ‚Üí Amplitude verkleinert + positiver Offset
        'Œ¥1': 0.7e-6,  # Polysterol ‚Üí Amplitude vergr√∂√üert + negativer Offset
        'Œ¥2': 6.8e-6,  # Silizium ‚Üí Amplitude verkleinert + positiver Offset
        #
        # Rauigkeit
        'œÉ1': 10e-10 * ureg.m,  # Polysterol ‚Üí Amplitude verkleinert bei hinteren Oszillationen
        'œÉ2': 7e-10 * ureg.m,  # Silizium ‚Üí Senkung des Kurvenendes und Amplitudenverkleinerung der Oszillationen
        #
        # Schichtdicke
        'z': ureg('860 √Ö'),  # Schichtdicke | verkleinert Oszillationswellenl√§nge
    }

    print(tools.fmt_compare_to_ref(parrat_params['Œ¥1'], litdata['PS']['Œ¥'], "Œ¥1"))
    print(tools.fmt_compare_to_ref(parrat_params['Œ¥2'], litdata['Si']['Œ¥'], "Œ¥2"))
    print(tools.fmt_compare_to_ref(parrat_params['z'], d_estim_b, "Schichtdicke (Fit vs. Peak-Dist.)", unit='nm'))

    par, r13 = calc_parratt(
        Œ±.to('rad').m,
        k=k,
        **parrat_params,
        ureg=ureg,
        rauigkeit=True,
    )

    par_glatt, r13_glatt = calc_parratt(
        Œ±.to('rad').m,
        k=k,
        **parrat_params,
        ureg=ureg,
        rauigkeit=False,
    )

    # passe H√∂he der Theoriekurve an Messwerte an
    # TODO: poor man's fit
    # theory_correction_factor = np.mean(I / par)
    theory_correction_factor = I[peaks[0]] / par[peaks[0]]
    # theory_correction_factor = I[peaks[-3]] / par[peaks[-3]]
    # theory_correction_factor = np.mean(I[peaks[-3:]] / par[peaks[-3:]])
    # print(f"theory_correction_factor = {theory_correction_factor}")
    # NOTE: Bewusst nicht *=, um ‚Ä¶?
    par = par * theory_correction_factor
    par_glatt = par_glatt * theory_correction_factor
    r13 = r13 * theory_correction_factor
    r13_glatt = r13_glatt * theory_correction_factor
    assert par.check('1/s'), "par hat falsche Dimension"

    if tools.PLOTS:
        # ‚ñà Plot 1: Messwerte und Korrekturen
        # Œ±_linspace = tools.linspace(*tools.bounds(Œ±), 1000)

        # TODO: Doppelachse mit Intensit√§t und Reflektivit√§t?
        with tools.plot_context(plt, '1/m', '1/s', "q", "I") as plt2:
            plt2.plot(q, tools.nominal_values(I_refl), 'x', label="Messwerte (reflektiert)")
            plt2.plot(q, tools.nominal_values(I_diff), '.', label="Messwerte (diffuse)")
            # plt2.plot(q, tools.nominal_values(I_corr_diff), '-', zorder=5, label="Messwerte (korrigiert um diffuse)")
            # plt2.plot(q, tools.nominal_values(I_corr_G), '-', zorder=5, label="Messwerte (korrigiert um Geometriefaktor)")
            plt2.plot(q, tools.nominal_values(I), '-', zorder=5, label="Messwerte (korrigiert)")

        plt.yscale('log')
        plt.grid()
        plt.legend()
        plt.tight_layout()
        if tools.BUILD:
            plt.savefig(f"build/plt/{name}_a.pdf")
        plt.show()

    # if True:
    if False:
        plt.plot(Œ±, G, '-', zorder=5, label="G-Faktor")
        # with tools.plot_context(plt, '1/m', '1/s', "q", "I") as plt2:
        #     plt2.plot(q[1:], tools.nominal_values(np.diff(I)), '-', zorder=5, label="Differenzen")
        # plt.yscale('symlog')
        # plt.xlim(right=2E7)
        # plt.savefig('foo.pdf')
        plt.show()

    # if tools.PLOTS:
    if True:  # TODO
        # ‚ñà Plot 2: Fit
        # TODO: Doppelachse mit Intensit√§t und Reflektivit√§t?
        plt.clf()
        with tools.plot_context(plt, '1/m', '1/s', "q", "I") as plt2:
            plt2.plot(q, I, fmt='.', zorder=5, label="Messwerte (korrigiert)")  # oder 'x--'?
            plt2.plot(q[peaks], I[peaks], fmt='x', zorder=5, label="Peaks")

            plt2.plot(q, par, fmt='-', zorder=5, label="Theoriekurve (rau)")
            # plt2.plot(q, r13, fmt='--', label="Theoriekurve (Fresnel)")
            plt2.plot(q, r13_glatt, fmt='--', label="Fresnelreflektivit√§t")
            plt2.plot(q, par_glatt, fmt='-', label="Theoriekurve (glatt)")

            plt.axvline(Œ±_to_q(Œ±_g, Œª).to('1/m'), color='C0', linestyle='--', label="$Œ±_g$")
            plt.axvline(Œ±_to_q(Œ±_c_PS, Œª).to('1/m'), color='C1', linestyle='--', label="$Œ±_c$ (PS)")
            plt.axvline(Œ±_to_q(Œ±_c_Si, Œª).to('1/m'), color='C2', linestyle='--', label="$Œ±_c$ (Si)")

        # plt.xlim(0, 2E7)
        # plt.ylim(bottom=1E2)
        plt.xlim(right=4E7)
        plt.ylim(bottom=1E0)

        plt.yscale('log')
        plt.grid()
        plt.legend()
        plt.tight_layout()
        if tools.BUILD:
            plt.savefig(f"build/plt/{name}_b.pdf")
        plt.show()
